#!/bin/sh

_resize() {
	xdotool getwindowfocus windowsize -- "${1:-0}" "${2:-0}"
}

_resize_relative() {
	eval "$(xdotool getwindowfocus getwindowgeometry --shell | awk "/WIDTH|HEIGHT/")"
	WINDOW_WIDTH=$(( WIDTH + "${1:-0}" ))
	WINDOW_HEIGHT=$(( HEIGHT + "${2:-0}" ))

	eval "$(xdotool getdisplaygeometry --shell | awk "/WIDTH|HEIGHT|X|Y/")"
	DISPLAY_WIDTH="$(( WIDTH - X ))"
	DISPLAY_HEIGHT="$(( HEIGHT - Y ))"

	if [[ "${WINDOW_WIDTH}" < 1 ]]; then
		WINDOW_WIDTH=1
	elif [[ "${WINDOW_WIDTH}" > "${DISPLAY_WIDTH}" ]]; then
		WINDOW_WIDTH="${DISPLAY_WIDTH}"
	fi

	if [[ "${WINDOW_HEIGHT}" < 1 ]]; then
		WINDOW_HEIGHT=1
	elif [[ "${WINDOW_HEIGHT}" > "${DISPLAY_HEIGHT}" ]]; then
		WINDOW_HEIGHT="${DISPLAY_HEIGHT}"
	fi

	xdotool windowsize -- "${WINDOW}" "${WINDOW_WIDTH}" "${WINDOW_HEIGHT}"
}

_move() {
	xdotool getwindowfocus windowmove -- "${1:-0}" "${2:-0}"
}

_move_relative() {
	xdotool getwindowfocus windowmove --relative -- "${1:-0}" "${2:-0}"
}

_center() {
	eval "$(xdotool getwindowfocus getwindowgeometry --shell | tail -n3 | head -n2)"
	WINDOW_WIDTH="${WIDTH}"
	WINDOW_HEIGHT="${HEIGHT}"
	eval "$(xdotool getdisplaygeometry --shell | awk "/WIDTH|HEIGHT/")"
	move "$(( (WIDTH - WINDOW_WIDTH) / 2 ))" "$(( (HEIGHT - WINDOW_HEIGHT) / 2 ))"
}

_snap() {
	eval "$(xdotool getwindowfocus getwindowgeometry --shell | awk "/WIDTH|HEIGHT/")"
	W_WIDTH="${WIDTH}"
	W_HEIGHT="${HEIGHT}"
	eval "$(xdotool getdisplaygeometry --shell)"
	case "${1:-0}" in
	    left)   move 0 y                         ;;
	    bottom) move x "$(( HEIGHT - W_HEIGHT ))";;
	    top)    move x 0                         ;;
	    right)  move "$(( WIDTH - W_WIDTH ))" y  ;;
	    *)      move x y                         ;;
	esac
}

_pointer_focus() {
	xdotool getmouselocation windowfocus

	if [[ "$NOWM_RAISE_FOCUS" ]]; then
		xdotool getwindowfocus windowraise
	fi
}

_select_focus() {
	xdotool selectwindow windowfocus
}

_close() {
	xdotool getwindowfocus windowclose
}

_quit() {
	xdotool getwindowfocus windowquit
}

_kill() {
	xdotool getwindowfocus windowkill
}

_logout() {
	pkill -KILL -u "$(whoami)"
}

noargs() {
	if [ -z "${DISPLAY}" ]; then
		NOWM_AUTOSTART="${XDG_CONFIG_HOME:-${HOME}/.config}/nowm/autostart"
		if [[ -f "${NOWM_AUTOSTART}" ]]; then
			source "${NOWM_AUTOSTART}"
		fi
		exec startx "$(which nowm)"
	else
		sleep infinity
	fi
}

valid="resize|resize_relative|move|move_relative|center|snap|pointer_focus|select_focus|close|quit|kill|logout"
if [[ "$1" =~ ^(${valid})$ ]]; then
	_"$1" "${@:2}"
elif [[ -z "$1" ]]; then
	noargs
else
	echo "Invalid command: $1"
	exit 1
fi
