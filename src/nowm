#!/bin/sh

#################
# Resize window #
#################

# By absolute size.
nowm_resize_absolute() {
	xdotool getwindowfocus windowsize -- "${1:-0}" "${2:-0}"
}

# By relative size from current size (+/-).
nowm_resize_relative() {
	eval "$(xdotool getwindowfocus getwindowgeometry --shell)"
	WINDOW_WIDTH=$(( WIDTH + "${1:-0}" ))
	WINDOW_HEIGHT=$(( HEIGHT + "${2:-0}" ))

	eval "$(xdotool getdisplaygeometry --shell)"
	DISPLAY_WIDTH="$(( WIDTH - X ))"
	DISPLAY_HEIGHT="$(( HEIGHT - Y ))"

	if [ "${WINDOW_WIDTH}" -lt 1 ]; then
		WINDOW_WIDTH=1
	elif [ "${WINDOW_WIDTH}" -gt "${DISPLAY_WIDTH}" ]; then
		WINDOW_WIDTH="${DISPLAY_WIDTH}"
	fi

	if [ "${WINDOW_HEIGHT}" -lt 1 ]; then
		WINDOW_HEIGHT=1
	elif [ "${WINDOW_HEIGHT}" -gt "${DISPLAY_HEIGHT}" ]; then
		WINDOW_HEIGHT="${DISPLAY_HEIGHT}"
	fi

	xdotool windowsize -- "${WINDOW}" "${WINDOW_WIDTH}" "${WINDOW_HEIGHT}"
}

# Autodetect.
nowm_resize() {
	if echo "${1}" | grep -qE '^(\+|-)[0-9]+$'; then
		nowm resize_relative "${1:-0}" 0
	else
		nowm resize_absolute "${1:-x}" y
	fi

	if echo "${2}" | grep -qE '^(\+|-)[0-9]+$'; then
		nowm resize_relative 0 "${2:-0}"
	else
		nowm resize_absolute x "${2:-y}"
	fi
}


###############
# Move window #
###############

# By absolute coordinates.
nowm_move_absolute() {
	xdotool getwindowfocus windowmove -- "${1:-0}" "${2:-0}"
}

# By relative coordinates from current position.
nowm_move_relative() {
	xdotool getwindowfocus windowmove --relative -- "${1:-0}" "${2:-0}"
}

# Autodetect.
nowm_move() {
	if echo "${1}" | grep -qE '^(\+|-)[0-9]+$'; then
		nowm move_relative "${1:-0}" 0
	else
		nowm move_absolute "${1:-x}" y
	fi

	if echo "${2}" | grep -qE '^(\+|-)[0-9]+$'; then
		nowm move_relative 0 "${2:-0}"
	else
		nowm move_absolute x "${2:-y}"
	fi
}

# Place at the center of the screen.
nowm_center() {
	eval "$(xdotool getwindowfocus getwindowgeometry --shell)"
	WINDOW_WIDTH="${WIDTH}"
	WINDOW_HEIGHT="${HEIGHT}"
	eval "$(xdotool getdisplaygeometry --shell)"
	nowm move "$(( (WIDTH - WINDOW_WIDTH) / 2 ))" "$(( (HEIGHT - WINDOW_HEIGHT) / 2 ))"
}

# Place at the side of the screen (left, right, top, bottom).
nowm_snap() {
	eval "$(xdotool getwindowfocus getwindowgeometry --shell)"
	WINDOW_WIDTH="${WIDTH}"
	WINDOW_HEIGHT="${HEIGHT}"
	eval "$(xdotool getdisplaygeometry --shell)"
	case "${1:-0}" in
	    left)   nowm move 0 y                              ;;
	    bottom) nowm move x "$(( HEIGHT - WINDOW_HEIGHT ))";;
	    top)    nowm move x 0                              ;;
	    right)  nowm move "$(( WIDTH - WINDOW_WIDTH ))" y  ;;
	esac
}


##############################
# Manipulations with windows #
##############################

# Focus window under cursor.
nowm_pointer_focus() {
	xdotool getmouselocation windowfocus
}

# Raise focused window. Useful in combination 'nowm pointer_focus && nowm raise'.
nowm_raise() {
	xdotool getwindowfocus windowraise
}

# Select window by clicking on it. Can be used if 'nowm_pointer_focus' does not work
nowm_select_focus() {
	xdotool selectwindow windowfocus
}

# Close focused window. Does NOT kill the child processes.
nowm_close() {
	xdotool getwindowfocus windowclose
}

#TODO
# Does nothing? Idk.
nowm_quit() {
	xdotool getwindowfocus windowquit
}

# Kill focused window. Kills the child processes too.
nowm_kill() {
	xdotool getwindowfocus windowkill
}


################
# NoWM session #
################

# Log out of the current session.
nowm_logout() {
	kill "$NOWM_PID"
}

# Start NoWM session or, if it is already running, rerun autostart script.
nowm_start() {
	if [ -z "${DISPLAY}" ]; then
		exec startx "$(which nowm)"
	else
		export NOWM_PID="$$"
		NOWM_AUTOSTART="${XDG_CONFIG_HOME:-${HOME}/.config}/nowm/autostart"
		[ -x "${NOWM_AUTOSTART}" ] && "${NOWM_AUTOSTART}"
		sleep infinity
	fi
}

# Display help message and exit.
nowm_help() {
	cat << EOF
Usage: nowm [ACTION]

If no action is specified, then, if no graphical server is running, start one and NoWM, otherwise rerun autostart script and sleep
EOF
	exit "${1:-0}"
}


########
# Main #
########

# String of space-separated valid arguments.
valid="resize resize_absolute resize_relative move move_absolute move_relative center snap pointer_focus raise select_focus close quit kill logout help"

# If no argument is present, start NoWM session.
if [ -z "${1}" ]; then
	nowm_start

# If argument is present and valid, run the corresponding function.
elif echo "${valid}" | grep -wq "${1}" ; then
	nowm_"${1}" "${@:2}"

# If argument is present but invalid, display error and help messages
else
	echo "Invalid command: '${1}'"
	nowm_help 1
fi
